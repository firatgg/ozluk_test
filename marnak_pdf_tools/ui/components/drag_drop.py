"""
SÃ¼rÃ¼kle-bÄ±rak bileÅŸenleri.
"""
from PyQt6.QtWidgets import QLabel, QFileDialog, QApplication
from PyQt6.QtCore import Qt, pyqtSignal, QTimer, QSize
from PyQt6.QtGui import QDragEnterEvent, QDropEvent, QKeyEvent, QIcon

# Marnak Lojistik Kurumsal Renkleri
MARNAK_BLUE = "#0066B3"
MARNAK_GREEN = "#3AB54A"
MARNAK_LIGHT_BLUE = "#E5F1F9"
MARNAK_LIGHT_GREEN = "#E8F5EA"

class DragDropWidget(QLabel):
    """Modern sÃ¼rÃ¼kle-bÄ±rak destekli widget."""
    
    # Sinyaller
    files_dropped = pyqtSignal(list)  # Dosya yollarÄ± listesi
    
    def __init__(self, parent=None, tab_type=None):
        """
        Args:
            parent: Ãœst widget
            tab_type: Sekme tÃ¼rÃ¼ (split, merge, rename, extract)
        """
        super().__init__(parent)
        self.setAcceptDrops(True)
        self.setMinimumHeight(180)  # Daha bÃ¼yÃ¼k, daha kolay hedeflenebilir alan
        self.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.setCursor(Qt.CursorShape.PointingHandCursor)
        self.setFocusPolicy(Qt.FocusPolicy.StrongFocus)  # Odaklanma politikasÄ±nÄ± ayarla
        self.setAttribute(Qt.WidgetAttribute.WA_StyledBackground, True)  # Odak stilini etkinleÅŸtir
        self.setWordWrap(True)  # Uzun metinleri satÄ±r sonunda bÃ¶l
        
        # Ä°kon resimleri yolu
        self.pdf_icon = "ğŸ“„"  # Default emoji icon
        
        # Stil tanÄ±mlamalarÄ±
        self.default_style = f"""
            QLabel {{
                border: 2px dashed {MARNAK_BLUE};
                border-radius: 12px;
                background-color: {MARNAK_LIGHT_BLUE};
                color: {MARNAK_BLUE};
                font-size: 15px;
                padding: 30px;
            }}
            QLabel:hover {{
                background-color: {MARNAK_LIGHT_GREEN};
                border-color: {MARNAK_GREEN};
                color: {MARNAK_GREEN};
                border-style: solid;
            }}
            QLabel:focus {{
                border: 3px solid {MARNAK_GREEN};
                border-radius: 12px;
                background-color: {MARNAK_LIGHT_GREEN};
                color: {MARNAK_GREEN};
                font-size: 15px;
                padding: 30px;
                outline: none;  /* VarsayÄ±lan odak gÃ¶sterimini kapat */
            }}
        """
        self.drag_over_style = f"""
            QLabel {{
                border: 3px solid {MARNAK_GREEN};
                border-radius: 12px;
                background-color: {MARNAK_LIGHT_GREEN};
                color: {MARNAK_GREEN};
                font-size: 15px;
                padding: 30px;
            }}
        """
        self.focus_received_style = f"""
            QLabel {{
                border: 3px solid {MARNAK_GREEN};
                border-radius: 12px;
                background-color: {MARNAK_LIGHT_GREEN};
                color: {MARNAK_GREEN};
                font-size: 15px;
                padding: 30px;
                outline: none;  /* VarsayÄ±lan odak gÃ¶sterimini kapat */
            }}
        """
        self.setStyleSheet(self.default_style)
        
        # Sekmeye gÃ¶re Ã¶zelleÅŸtirilmiÅŸ metinler
        tab_texts = {
            "split": "PDF dosyalarÄ±nÄ± buraya sÃ¼rÃ¼kleyin veya tÄ±klayarak seÃ§in\n\n"
                     "PDF sayfalarÄ±nÄ± ayrÄ± dosyalara bÃ¶lmek iÃ§in Ctrl+V ile dosya yapÄ±ÅŸtÄ±rabilirsiniz",
            "merge": "PDF dosyalarÄ±nÄ± buraya sÃ¼rÃ¼kleyin veya tÄ±klayarak seÃ§in\n\n"
                     "Birden fazla PDF'i tek dosyada birleÅŸtirmek iÃ§in Ctrl+V ile dosya yapÄ±ÅŸtÄ±rabilirsiniz",
            "rename": "PDF dosyasÄ±nÄ± buraya sÃ¼rÃ¼kleyin veya tÄ±klayarak seÃ§in\n\n"
                     "DosyayÄ± yeniden adlandÄ±rmak iÃ§in Ctrl+V ile dosya yapÄ±ÅŸtÄ±rabilirsiniz",
            "extract": "PDF dosyasÄ±nÄ± buraya sÃ¼rÃ¼kleyin veya tÄ±klayarak seÃ§in\n\n"
                     "Belirli sayfalarÄ± Ã§Ä±kartmak iÃ§in Ctrl+V ile dosya yapÄ±ÅŸtÄ±rabilirsiniz"
        }
        
        # VarsayÄ±lan metin veya sekmeye Ã¶zel metin
        if tab_type in tab_texts:
            self.setText(f"{self.pdf_icon} {tab_texts[tab_type]}")
        else:
            self.setText(f"{self.pdf_icon} PDF dosyalarÄ±nÄ± buraya sÃ¼rÃ¼kleyin\n"
                         f"veya tÄ±klayarak seÃ§in\n\n"
                         f"Ctrl+V ile dosya yapÄ±ÅŸtÄ±rabilirsiniz")
            
        self.tab_type = tab_type
        
        # Animasyon iÃ§in zamanlayÄ±cÄ±
        self.animation_timer = QTimer()
        self.animation_timer.setSingleShot(True)
        self.animation_timer.timeout.connect(self.reset_style)
        
        # Odak kaybÄ±nÄ± izlemek iÃ§in zamanlayÄ±cÄ±
        self.focus_check_timer = QTimer()
        self.focus_check_timer.setInterval(500)  # 500ms'de bir kontrol et
        self.focus_check_timer.timeout.connect(self.check_focus)
        self.focus_check_timer.start()
        
    def check_focus(self):
        """Odak durumunu dÃ¼zenli olarak kontrol eder ve gerekirse odak alÄ±r"""
        if not self.hasFocus() and self.isVisible() and self.parent() and self.parent().isVisible():
            # Ana pencere aktifse ve bu widget gÃ¶rÃ¼nÃ¼r durumdaysa odak almaya Ã§alÄ±ÅŸ
            window = self.window()
            if window and window.isActiveWindow():
                self.setFocus(Qt.FocusReason.MouseFocusReason)
                print("Odak yeniden alÄ±ndÄ±")
                
    def keyPressEvent(self, event: QKeyEvent):
        """Klavye olaylarÄ±nÄ± yakala"""
        # Ctrl+V kÄ±sayolu iÃ§in
        # TuÅŸ ve modifiye edici kontrolÃ¼ birleÅŸtirilmiÅŸ ÅŸekilde
        try:
            is_ctrl_v = (event.key() == Qt.Key.Key_V and 
                         event.modifiers() & Qt.KeyboardModifier.ControlModifier)
            
            if is_ctrl_v:
                clipboard = QApplication.clipboard()
                mime_data = clipboard.mimeData()
                
                if mime_data and mime_data.hasUrls():
                    files = [url.toLocalFile() for url in mime_data.urls()]
                    pdf_files = [f for f in files if f.lower().endswith('.pdf')]
                    if pdf_files:
                        self.files_dropped.emit(pdf_files)
                        self.show_animation()
                        print(f"YapÄ±ÅŸtÄ±rÄ±ldÄ±: {len(pdf_files)} PDF dosyasÄ±")
                    else:
                        print("YapÄ±ÅŸtÄ±rÄ±lan iÃ§erikte PDF dosyasÄ± yok")
                else:
                    print("YapÄ±ÅŸtÄ±rÄ±lan iÃ§erikte dosya URL'si yok")
                
                # EtkinliÄŸi iÅŸle ve durdur
                event.accept()
                return
        except Exception as e:
            print(f"Ctrl+V iÅŸleme hatasÄ±: {str(e)}")
            
        # Enter tuÅŸu dosya seÃ§im dialogunu aÃ§ar
        if event.key() == Qt.Key.Key_Return or event.key() == Qt.Key.Key_Enter:
            self.open_file_dialog()
            event.accept()
            return
            
        # DiÄŸer tuÅŸ olaylarÄ±nÄ± Ã¼st sÄ±nÄ±fa ilet
        super().keyPressEvent(event)
        
    def showEvent(self, event):
        """Widget gÃ¶rÃ¼nÃ¼r hale geldiÄŸinde Ã§aÄŸrÄ±lÄ±r"""
        super().showEvent(event)
        # KÄ±sa bir gecikme ile odak almaya Ã§alÄ±ÅŸ
        QTimer.singleShot(100, lambda: self.setFocus(Qt.FocusReason.OtherFocusReason))
        print("DragDrop widget gÃ¶rÃ¼nÃ¼r oldu")
        
    def focusInEvent(self, event):
        """Widget odak aldÄ±ÄŸÄ±nda Ã§aÄŸrÄ±lÄ±r."""
        super().focusInEvent(event)
        # Odak durumunu gÃ¶rsel olarak belirginleÅŸtir
        self.setStyleSheet(self.focus_received_style)
        self.setCursor(Qt.CursorShape.PointingHandCursor)
        self.raise_()  # Widget'Ä± en Ã¼ste getir
        print("DragDrop widget odak aldÄ±")
        
    def open_file_dialog(self):
        """Dosya seÃ§im dialogunu aÃ§ar"""
        files, _ = QFileDialog.getOpenFileNames(
            self,
            "PDF DosyalarÄ± SeÃ§",
            "",
            "PDF DosyalarÄ± (*.pdf)"
        )
        
        if files:
            self.files_dropped.emit(files)
            self.show_animation()
        
    def mousePressEvent(self, event):
        """TÄ±klama olayÄ±nÄ± yakala"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.setFocus()  # TÄ±klandÄ±ÄŸÄ±nda odaÄŸÄ± al
            self.open_file_dialog()
        
    def dragEnterEvent(self, event: QDragEnterEvent):
        """SÃ¼rÃ¼kleme baÅŸladÄ±ÄŸÄ±nda Ã§aÄŸrÄ±lÄ±r"""
        try:
            if event.mimeData().hasUrls():
                # Sadece PDF dosyalarÄ±nÄ± kabul et
                urls = event.mimeData().urls()
                if any(url.toLocalFile().lower().endswith('.pdf') for url in urls):
                    self.setStyleSheet(self.drag_over_style)
                    event.acceptProposedAction()
        except Exception as e:
            print(f"SÃ¼rÃ¼kleme hatasÄ±: {str(e)}")
    
    def dragLeaveEvent(self, event):
        """SÃ¼rÃ¼kleme alanÄ±ndan Ã§Ä±kÄ±ldÄ±ÄŸÄ±nda Ã§aÄŸrÄ±lÄ±r"""
        # Odak durumuna gÃ¶re uygun stili ayarla
        if self.hasFocus():
            self.setStyleSheet(self.focus_received_style)
        else:
            self.setStyleSheet(self.default_style)
        
    def dropEvent(self, event: QDropEvent):
        """Dosya bÄ±rakÄ±ldÄ±ÄŸÄ±nda Ã§aÄŸrÄ±lÄ±r"""
        try:
            files = [url.toLocalFile() for url in event.mimeData().urls()]
            pdf_files = [f for f in files if f.lower().endswith('.pdf')]
            
            if not pdf_files:
                return
            
            # Sinyal gÃ¶nder
            self.files_dropped.emit(pdf_files)
            self.show_animation()
        except Exception as e:
            print(f"BÄ±rakma hatasÄ±: {str(e)}")
            
    def show_animation(self):
        """BaÅŸarÄ±lÄ± dosya ekleme animasyonunu gÃ¶ster"""
        self.setStyleSheet(self.drag_over_style)
        self.animation_timer.start(800)  # 800ms sonra stili sÄ±fÄ±rla
        
    def reset_style(self):
        """Stili varsayÄ±lana dÃ¶ndÃ¼r"""
        # EÄŸer hala odak bu widget'taysa, odak stilini kullan
        if self.hasFocus():
            self.setStyleSheet(self.focus_received_style)
        else:
            self.setStyleSheet(self.default_style)
            
    def minimumSizeHint(self):
        """Minimum boyut Ã¶nerisi"""
        return QSize(200, 180)
        
    def sizeHint(self):
        """Tercih edilen boyut Ã¶nerisi"""
        return QSize(400, 200) 